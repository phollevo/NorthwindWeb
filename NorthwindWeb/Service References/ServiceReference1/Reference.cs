//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NorthwindWeb.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISupplier")]
    public interface ISupplier {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/getSupplier", ReplyAction="http://tempuri.org/ISupplier/getSupplierResponse")]
        Libraries.Supplier getSupplier(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/getSupplier", ReplyAction="http://tempuri.org/ISupplier/getSupplierResponse")]
        System.Threading.Tasks.Task<Libraries.Supplier> getSupplierAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/searchSuppliers", ReplyAction="http://tempuri.org/ISupplier/searchSuppliersResponse")]
        Libraries.Supplier[] searchSuppliers(string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/searchSuppliers", ReplyAction="http://tempuri.org/ISupplier/searchSuppliersResponse")]
        System.Threading.Tasks.Task<Libraries.Supplier[]> searchSuppliersAsync(string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/seeDetails", ReplyAction="http://tempuri.org/ISupplier/seeDetailsResponse")]
        Libraries.Supplier seeDetails(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/seeDetails", ReplyAction="http://tempuri.org/ISupplier/seeDetailsResponse")]
        System.Threading.Tasks.Task<Libraries.Supplier> seeDetailsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/modify", ReplyAction="http://tempuri.org/ISupplier/modifyResponse")]
        bool modify(Libraries.Supplier supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/modify", ReplyAction="http://tempuri.org/ISupplier/modifyResponse")]
        System.Threading.Tasks.Task<bool> modifyAsync(Libraries.Supplier supplier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/delete", ReplyAction="http://tempuri.org/ISupplier/deleteResponse")]
        bool delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplier/delete", ReplyAction="http://tempuri.org/ISupplier/deleteResponse")]
        System.Threading.Tasks.Task<bool> deleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISupplierChannel : NorthwindWeb.ServiceReference1.ISupplier, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SupplierClient : System.ServiceModel.ClientBase<NorthwindWeb.ServiceReference1.ISupplier>, NorthwindWeb.ServiceReference1.ISupplier {
        
        public SupplierClient() {
        }
        
        public SupplierClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SupplierClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SupplierClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SupplierClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Libraries.Supplier getSupplier(int Id) {
            return base.Channel.getSupplier(Id);
        }
        
        public System.Threading.Tasks.Task<Libraries.Supplier> getSupplierAsync(int Id) {
            return base.Channel.getSupplierAsync(Id);
        }
        
        public Libraries.Supplier[] searchSuppliers(string pattern) {
            return base.Channel.searchSuppliers(pattern);
        }
        
        public System.Threading.Tasks.Task<Libraries.Supplier[]> searchSuppliersAsync(string pattern) {
            return base.Channel.searchSuppliersAsync(pattern);
        }
        
        public Libraries.Supplier seeDetails(int Id) {
            return base.Channel.seeDetails(Id);
        }
        
        public System.Threading.Tasks.Task<Libraries.Supplier> seeDetailsAsync(int Id) {
            return base.Channel.seeDetailsAsync(Id);
        }
        
        public bool modify(Libraries.Supplier supplier) {
            return base.Channel.modify(supplier);
        }
        
        public System.Threading.Tasks.Task<bool> modifyAsync(Libraries.Supplier supplier) {
            return base.Channel.modifyAsync(supplier);
        }
        
        public bool delete(int id) {
            return base.Channel.delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAsync(int id) {
            return base.Channel.deleteAsync(id);
        }
    }
}
